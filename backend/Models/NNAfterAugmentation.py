# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xsrQ8knTdKEn63Ofkc7-cMx7ACwXfZKF
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import random

Bgl=round(20*2+20+20+20+20,2)
Bdsen=round(20*2+20+20+20+20*2+20,2)
Bssir=round(20*2+20+20+20,2)
Bdev_w_m=round(20*2+20+20+20,2)

l=["Mathématiques de l'ingénieur","Analyse numérique","Systèmes logiques et Architectures des ordinateurs",
   "Réseaux -1","Concept de base des Systèmes d'exploitation","Algorithmiques et Structures de données",
   "Programmation C","Techniques decommunication - 1","English communication - 1",
   "Bases de données","Virtualisation et Cloud","Moyenne S1",
   "Probab,Stat. Filesd'att. et Proc.aléatoires","Théorie des graphes","Réseaux IP (partie2)",
   "Systèmes d'exploitation Linux - 2","Programmation 1: JAVA","Programmation Python","Théorie des langages",
   "Modélisation UML","Développement Web","Techniques decommunication - 2","English communication - 2",
   "Moyenne S2","Moyenne generale", "Score Telecom", "Score GLSI", "Score DSEN", "Score DMWM", "Score SSIR",
   "Score Systèmes Embarqués & IOT", "moy 2eme", "specialite"]



def moyenneS1(m):
    return float("{:.2f}".format((m[0] * 2 + m[1] * 1 + m[2] * 2 + m[3] * 2 + m[4] * 2 + m[5]*2 + m[0]*2 + m[7]
                                  + m[8] + m[9]*2 + m[10]*2 ) / 19))

def moyenneS2(m):
    return float("{:.2f}".format((m[0] * 3 + m[1] * 1 + m[2] * 2 + m[3] * 2 + m[4] * 2 + m[5] + m[0] * 2 + m[7]
                                  + m[8] + m[9] * 2 + m[10] * 2) / 19))

def GeneralMoy(m1,m2):
    return  float("{:.2f}".format((m1+m2)/2))

def Score(data):
    return [round(data[-1]*2+data[0]+data[14]+data[15],2),round(data[-1]*2+data[5]+data[6]+data[16]+data[19],2),
            round(data[-1]*2+data[0]+data[5]+data[9]+data[12]*2+data[17],2),
            round(data[-1]*2+data[5]+data[16]+data[20],2),round(data[-1]*2+data[0]+data[4]+data[14],2),
            round(data[-1]*2+data[0]+data[2]*2+data[12]+data[13]*2+data[15]*2,2)]

def BSepciality(data):
    lol=data[-5:-1]
    lol[0]=lol[0]/Bgl
    lol[1] = lol[1] / Bdsen
    lol[2] = lol[2] / Bssir
    lol[3] = lol[3] / Bdev_w_m

    if lol.index(max(lol))==0:
        return "gl"
    elif lol.index(max(lol))==1:
        return "dsen"
    elif lol.index((max(lol)))==2:
        return "ssir"
    else:
        return "dev_w_m"


DATA=[]
for data in range(200):

    S1=[round(random.uniform(3.00, 19.99),2) for i in range(11)]
    S1.append(moyenneS1(S1))

    S2=[round(random.uniform(3.00, 19.99),2) for j in range(11)]
    S2.append(moyenneS2(S2))

    S2.append(GeneralMoy(moyenneS1(S1),moyenneS2(S2)))

    S1 += S2
    S1 += Score(S1)

    Sp=BSepciality(S1)

    k=GeneralMoy(moyenneS1(S1),moyenneS2(S2))
    S1.append(round(random.uniform(k-1.50, k+1.50),2))

    S1.append(Sp)

    DATA.append(S1)


Data0 = pd.DataFrame(data=DATA, columns=l)

Dataset = pd.read_excel("Generation2020.2021.xlsx")

Data1=Dataset.drop(['C.I.N'],axis=1)

DataNew0=np.concatenate((Data1,Data0),axis=0)

LastData = pd.DataFrame(data=DataNew0, columns=l)

Label=LastData['moy 2eme']

Data=LastData.drop(['moy 2eme','specialite'],axis=1)

from sklearn.preprocessing import LabelEncoder
X1=LastData['specialite']
le= LabelEncoder()
X1New = le.fit_transform(X1)
X1New = X1New.reshape(-1,1)

DataNew=np.concatenate((Data,X1New),axis=1)

DataNew  = np.array(DataNew,  dtype=float)
Label = np.array(Label,  dtype=float)

for i in range(len(DataNew)):
  DataNew[i]=np.array(DataNew[i],  dtype=float)

Dataset = pd.read_excel("Generation2020.2021.xlsx")
Label=Dataset['moy 2eme']
Data=Dataset.drop(['moy 2eme','C.I.N','specialite'],axis=1)

from sklearn.preprocessing import LabelEncoder
X1=Dataset['specialite']
le= LabelEncoder()
X1New = le.fit_transform(X1)
X1New = X1New.reshape(-1,1)

DataNew=np.concatenate((Data,X1New),axis=1)

DataNew  = np.array(DataNew,  dtype=float)
Label = np.array(Label,  dtype=float)

for i in range(len(DataNew)):
  DataNew[i]=np.array(DataNew[i],  dtype=float)
  
#dev_w_m=0
#dsen=1
#gl=2
#ssir=3

from sklearn.model_selection import train_test_split
x_train1,x_test1,train_label,test_label=train_test_split(DataNew,Label,test_size = 0.33 , random_state= 0)

l0 = tf.keras.layers.Dense(units=4, input_shape=[32])
l1 = tf.keras.layers.Dense(units=4)
l2 = tf.keras.layers.Dense(units=1)
model = tf.keras.Sequential([l0, l1, l2])
model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1),
              metrics=["mae"])
model.fit(x_train1, train_label, epochs=600, validation_data=(x_test1,test_label))
print("Finished training the model")

print(model.predict(lol))
print("Moyenne 2 eme anné d'un etudiant aliatoire: {} ".format(model.predict(lol)))
print("These are the l0 variables: {}".format(l0.get_weights()))
print("These are the l1 variables: {}".format(l1.get_weights()))
print("These are the l2 variables: {}".format(l2.get_weights()))

Anouar=np.array([17.2,13.8,9.2,13.65,11.58,10.3,13.1,12.8,11.6,10,10.45,
               12.06,13.8,11.75,13.3,12.2,14.15,10,14.95,10.7,14.1,11.5,
               11.9,12.81,12.44,67.58,73.13,99.98,63.43,66.96,118.18,0],dtype=float)
Anouar=Anouar.reshape(1,32)
print("Anouar moyene 2eme: ",model.predict(Anouar))

DSEN=np.array([[17.2,13.8,9.2,13.65,11.58,10.3,13.1,12.8,11.6,10,10.45,
               12.06,13.8,11.75,13.3,12.2,14.15,10,14.95,10.7,14.1,11.5,
               11.9,12.81,12.44,67.58,73.13,99.98,63.43,66.96,118.18,1],
               [10.65, 6.1, 2.4, 10.7, 8.2, 4.52, 9, 11, 5.9, 8.9, 5.4,
                7.5, 11.4, 16, 10.3, 8.62, 6.95, 8.5, 12.45, 9.88, 7.3,
                11.5, 8.2, 10.21, 8.86, 47.29, 48.07, 73.09, 36.49, 46.87,
                77.71,1],
               [16.4, 11.1, 7.4, 9.9, 11.05, 3.2, 9.93, 16.6, 9.3, 9.39, 5.8,
                9.67, 12.9, 13.25, 10, 9.05, 10.65, 6.5, 8.95, 9.35, 7.9,
                13, 9.6, 10.17, 9.92, 55.29, 52.97, 81.13, 41.59, 57.29,
                92.14,1],
               [8.85, 9.1, 5.6, 4.2, 7.3, 3.85, 10.05, 13.9, 7, 11.76,
                3.88, 7.42, 9.9, 8.25, 5.5, 7.5, 11.45, 9, 8.85, 10.72,
                8.5, 12, 13.7, 9.26, 8.34, 38.53, 52.75, 69.94, 40.48,
                38.33, 75.23,1],
               [16.95, 14.1, 4.8, 9.5, 11.85,13.25, 13.82, 13.4, 13.6,
                12.12, 7.9, 11.66, 13.6, 10.5, 12.5, 9.25, 14.65, 11,
                11.25, 13.15, 10.3, 11, 12.8, 11.85, 11.76, 62.22, 78.39,
                104.04, 61.72, 64.82, 103.07,1],
               [17.1, 11.4, 9.6, 14.2, 11.9, 12.45, 15.02, 13.9, 13.9,
                10.58, 15.63, 13.27, 13.3, 16.75, 13.6, 14.8, 12.5, 11.5,
                13.2, 10.5, 14.1, 12, 13.9, 13.41, 13.34, 72.18, 77.15, 104.91,
                65.73, 69.28, 129.18,1],
               [11.85, 5.9, 3, 14.25, 12.92, 11.6, 13.1, 9, 11.6, 7.2,
                9.23, 10.15, 11.8, 17.25, 12.6, 11.98, 12.95, 14, 10.5, 12.82,
                13.1, 11.5, 14.1, 12.93, 11.54, 59.51, 73.55, 91.33, 60.73,
                60.45, 105.49,1],
               [16.7, 16.3, 9.4, 15.45, 13.7, 17.12, 15.9, 12.7, 12.5,
                11.78, 8.88, 13.65, 18.6, 15.25, 15.9, 11.35, 14.82, 16,
                14.5, 13, 12.9, 13, 14.9, 14.55, 14.1, 72.15, 89.04,
                127, 73.04, 74.5, 134.3,1],
               [11.75, 3.8, 6.6, 9.4, 12.35, 16.72, 16.8, 9.6, 12.6, 8.38,
                7.92, 10.83, 8.2, 8, 7.4, 6.57, 13, 14.5, 9.85, 9.15, 12.7, 11,
                13.2, 9.92, 10.38, 46.48, 76.43, 88.51, 63.18, 52.26, 95.25,1],
               [15.05, 7.1, 3.6, 5.15, 9.93, 4.88, 10.25, 13, 10.1, 11.21,
                9.33, 8.89, 8.7, 11.75, 8.8, 7.88, 12.5, 6, 9.1, 11.62, 8.8,
                11.5, 10, 9.78, 9.34, 50.41, 57.93, 73.22, 44.86, 52.46,
                77.49,1]],dtype=float)
print("DSEN moyene 2eme: ",model.predict(DSEN))

pred=model.predict(x_test1)

from sklearn.metrics import r2_score
r=r2_score(test_label,pred)
print("r: ",r)

#5
from sklearn.metrics import mean_squared_error
mse=mean_squared_error(test_label,pred)
import math
print('RMSE',math.sqrt(mse))

from sklearn.metrics import explained_variance_score
EV=explained_variance_score(test_label, pred)
print("Explained variance: %f" % (EV))

"""randomforest:
[13.26333333, 11.38166667, 10.64166667, 10.19666667, 11.97833333,
12.25166667, 12.505, 13.70833333, 11.38833333, 10.63333333]

##########################################################

 Real Result:
[13.39, 11.36, 10.62, 8.12, 13.10, 12.80, 12.50, 14.26, 8.66, 11.88]
[[13.153887]
 [11.579534]
 [11.424986]
 [11.30238 ]
 [12.760871]
 [13.067337]
 [12.930312]
 [14.902457]
 [10.764282]
 [10.529272]]
"""